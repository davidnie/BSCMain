


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; ÎÄ¼þÂ·¾¶£º
    3 00000000         ;      UCOSII/Ports/os_cpu_a.asm
    4 00000000         ; ÐÞ¸ÄÊ±¼ä£º
    5 00000000         ;      2013-6-20
    6 00000000         ; °æ±¾£º
    7 00000000         ;      V 1.0
    8 00000000         ; ×÷Õß£º
    9 00000000         ;      Eamonn (c) www.eamonning.com
   10 00000000         ; ÁªÏµ£º
   11 00000000         ;      i@eamonning.com
   12 00000000         
   13 00000000         
   14 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   15 00000000                 EXTERN           OSPrioCur
   16 00000000                 EXTERN           OSPrioHighRdy
   17 00000000                 EXTERN           OSTCBCur
   18 00000000                 EXTERN           OSTCBHighRdy
   19 00000000                 EXTERN           OSIntExit
   20 00000000                 EXTERN           OSTaskSwHook
   21 00000000         
   22 00000000         
   23 00000000                 EXPORT           CPU_IntDisable
   24 00000000                 EXPORT           CPU_IntEnable
   25 00000000         
   26 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   27 00000000                 EXPORT           OS_CPU_SR_Restore
   28 00000000                 EXPORT           OSStartHighRdy
   29 00000000                 EXPORT           OSCtxSw
   30 00000000                 EXPORT           OSIntCtxSw
   31 00000000                 EXPORT           OS_CPU_PendSVHandler
   32 00000000         
   33 00000000         ;*******************************************************
                       *************************************************
   34 00000000         ;                                                EQUATES
                       
   35 00000000         ;*******************************************************
                       *************************************************
   36 00000000         
   37 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   38 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   39 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   40 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   41 00000000         



ARM Macro Assembler    Page 2 


   42 00000000         
   43 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2 
                                                            ;AREA |.text| ±íÊ¾£
                                                            ºÑ¡Ôñ¶Î |.text|¡£ 
   44 00000000         ;CODE±íÊ¾´úÂë¶Î£¬READONLY±íÊ¾Ö»¶Á£¨È±Ê¡£© 
   45 00000000         ;ALIGN=2±íÊ¾4×Ö½Ú¶ÔÆë¡£ÈôALIGN=n£¬Õâ2^n¶ÔÆë 
   46 00000000                 THUMB                        ;Thumb ´úÂë
   47 00000000                 REQUIRE8                     ;Ö¸¶¨µ±Ç°ÎÄ¼þÒªÇó¶Ñ
                                                            Õ»°Ë×Ö½Ú¶ÔÆë
   48 00000000                 PRESERVE8                    ;ÁîÖ¸¶¨µ±Ç°ÎÄ¼þ±£³Ö
                                                            ¶ÑÕ»°Ë×Ö½Ú¶ÔÆë
   49 00000000         
   50 00000000         ;·µ»Ø×´Ì¬¼Ä´æÆ÷Öµ²¢½ûÖ¹ËùÓÐÖÐ¶Ï
   51 00000000         OS_CPU_SR_Save
   52 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   53 00000004 B672            CPSID            I
   54 00000006 4770            BX               LR
   55 00000008         
   56 00000008         ;»Ö¸´×´Ì¬¼Ä´æÆ÷Öµ
   57 00000008         OS_CPU_SR_Restore
   58 00000008 F380 8810       MSR              PRIMASK, R0
   59 0000000C 4770            BX               LR
   60 0000000E         
   61 0000000E         ;*******************************************************
                       *************************************************
   62 0000000E         ;                                          START MULTITA
                       SKING
   63 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
   64 0000000E         ;
   65 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
   66 0000000E         ;              the first task to start.
   67 0000000E         ;
   68 0000000E         ;           2) OSStartHighRdy() MUST:
   69 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
   70 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
   71 0000000E         ;              c) Set OSRunning to TRUE;
   72 0000000E         ;              d) Trigger PendSV exception;
   73 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
   74 0000000E         ;*******************************************************
                       *************************************************
   75 0000000E         
   76 0000000E         OSStartHighRdy
   77 0000000E 4825            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
   78 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
   79 00000014 7001            STRB             R1, [R0]
   80 00000016         
   81 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call



ARM Macro Assembler    Page 3 


   82 00000018 F380 8809       MSR              PSP, R0
   83 0000001C         
   84 0000001C 4822            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
   85 0000001E 2101            MOVS             R1, #1
   86 00000020 7001            STRB             R1, [R0]
   87 00000022         
   88 00000022 4822            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   89 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   90 00000028 6001            STR              R1, [R0]
   91 0000002A         
   92 0000002A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   93 0000002C         
   94 0000002C         
   95 0000002C         OSStartHang
   96 0000002C E7FE            B                OSStartHang ; Should never get 
                                                            here
   97 0000002E         
   98 0000002E         
   99 0000002E         
  100 0000002E         ;*******************************************************
                       *************************************************
  101 0000002E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  102 0000002E         ;                                           void OSCtxSw
                       (void)
  103 0000002E         ;
  104 0000002E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  105 0000002E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  106 0000002E         ;*******************************************************
                       *************************************************
  107 0000002E         
  108 0000002E         OSCtxSw
  109 0000002E 481F            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  110 00000030 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  111 00000034 6001            STR              R1, [R0]
  112 00000036 4770            BX               LR
  113 00000038         
  114 00000038         ;*******************************************************
                       *************************************************
  115 00000038         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  116 00000038         ;                                         void OSIntCtxS
                       w(void)
  117 00000038         ;
  118 00000038         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  119 00000038         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will



ARM Macro Assembler    Page 4 


  120 00000038         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  121 00000038         ;*******************************************************
                       *************************************************
  122 00000038         
  123 00000038         OSIntCtxSw
  124 00000038 481C            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  125 0000003A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  126 0000003E 6001            STR              R1, [R0]
  127 00000040 4770            BX               LR
  128 00000042         
  129 00000042         ;*******************************************************
                       *************************************************
  130 00000042         ;                                         HANDLE PendSV 
                       EXCEPTION
  131 00000042         ;                                     void OS_CPU_PendSV
                       Handler(void)
  132 00000042         ;
  133 00000042         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  134 00000042         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  135 00000042         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  136 00000042         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  137 00000042         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  138 00000042         ;              a thread or occurs due to an interrupt or
                        exception.
  139 00000042         ;
  140 00000042         ;           2) Pseudo-code is:
  141 00000042         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  142 00000042         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  143 00000042         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  144 00000042         ;              d) Call OSTaskSwHook();
  145 00000042         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  146 00000042         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  147 00000042         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  148 00000042         ;              h) Restore R4-R11 from new process stack;
                       
  149 00000042         ;              i) Perform exception return which will re
                       store remaining context.
  150 00000042         ;
  151 00000042         ;           3) On entry into PendSV handler:
  152 00000042         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  153 00000042         ;                 xPSR, PC, LR, R12, R0-R3
  154 00000042         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)



ARM Macro Assembler    Page 5 


  155 00000042         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  156 00000042         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  157 00000042         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  158 00000042         ;
  159 00000042         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  160 00000042         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  161 00000042         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  162 00000042         ;*******************************************************
                       *************************************************
  163 00000042         
  164 00000042         OS_CPU_PendSVHandler
  165 00000042 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  166 00000044 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  167 00000048 B150            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  168 0000004A         
  169 0000004A F1A0 0020       SUB              R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  170 0000004E E880 0FF0       STM              R0, {R4-R11}
  171 00000052         
  172 00000052 F1A0 0040       SUB              R0, R0, #0X40
  173 00000056 EC80 8B10       VSTM             R0, {D8-D15}
  174 0000005A         
  175 0000005A         
  176 0000005A 4915            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  177 0000005C 6809            LDR              R1, [R1]
  178 0000005E 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  179 00000060         
  180 00000060         ; At this point, entire context of process has been save
                       d
  181 00000060         OS_CPU_PendSVHandler_nosave
  182 00000060 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  183 00000062 4814            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  184 00000064 4780            BLX              R0
  185 00000066 F85D EB04       POP              {R14}
  186 0000006A         
  187 0000006A 4813            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  188 0000006C 4913            LDR              R1, =OSPrioHighRdy
  189 0000006E 780A            LDRB             R2, [R1]
  190 00000070 7002            STRB             R2, [R0]
  191 00000072         



ARM Macro Assembler    Page 6 


  192 00000072 480F            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  193 00000074 4912            LDR              R1, =OSTCBHighRdy
  194 00000076 680A            LDR              R2, [R1]
  195 00000078 6002            STR              R2, [R0]
  196 0000007A         
  197 0000007A 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  198 0000007C         
  199 0000007C EC90 8B10       VLDM             R0, {D8-D15} ; restore s16-s31
  200 00000080 F100 0040       ADD              R0, R0, #0x40
  201 00000084         
  202 00000084 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  203 00000088 F100 0020       ADD              R0, R0, #0x20
  204 0000008C         
  205 0000008C F02E 0E10       BIC.W            LR, LR, #0x10 ; Set exception r
                                                            eturn uses floating
                                                            -point state
  206 00000090         
  207 00000090         
  208 00000090 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  209 00000094 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  210 00000098 B662            CPSIE            I
  211 0000009A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  212 0000009C         
  213 0000009C         
  214 0000009C         ;interrupt disable and enable
  215 0000009C         ; By Eamonn
  216 0000009C         CPU_IntDisable
  217 0000009C B672            CPSID            I
  218 0000009E 4770            BX               LR
  219 000000A0         
  220 000000A0         
  221 000000A0         CPU_IntEnable
  222 000000A0 B662            CPSIE            I
  223 000000A2 4770            BX               LR
  224 000000A4         
  225 000000A4         
  226 000000A4         
  227 000000A4                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\Deb
ug\os_cpu_a.d -o.\Debug\os_cpu_a.o -Id:\Keil_v5\ARM\RV31\Inc -Id:\Keil_v5\ARM\C
MSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx --predefine="__MICROLIB SETA 1" 



ARM Macro Assembler    Page 7 


--list=.\os_cpu_a.lst ..\UCOS\Port\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 43 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      None
Comment: .text unused
CPU_IntDisable 0000009C

Symbol: CPU_IntDisable
   Definitions
      At line 216 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 23 in file ..\UCOS\Port\os_cpu_a.asm
Comment: CPU_IntDisable used once
CPU_IntEnable 000000A0

Symbol: CPU_IntEnable
   Definitions
      At line 221 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 24 in file ..\UCOS\Port\os_cpu_a.asm
Comment: CPU_IntEnable used once
OSCtxSw 0000002E

Symbol: OSCtxSw
   Definitions
      At line 108 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 29 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000038

Symbol: OSIntCtxSw
   Definitions
      At line 123 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 30 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002C

Symbol: OSStartHang
   Definitions
      At line 95 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 96 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 76 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 28 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler 00000042

Symbol: OS_CPU_PendSVHandler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 164 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 31 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 00000060

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 181 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 167 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 57 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 27 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 51 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 26 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 37 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 88 in file ..\UCOS\Port\os_cpu_a.asm
      At line 109 in file ..\UCOS\Port\os_cpu_a.asm
      At line 124 in file ..\UCOS\Port\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 40 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 89 in file ..\UCOS\Port\os_cpu_a.asm
      At line 110 in file ..\UCOS\Port\os_cpu_a.asm
      At line 125 in file ..\UCOS\Port\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 39 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 78 in file ..\UCOS\Port\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 38 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 77 in file ..\UCOS\Port\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 19 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 15 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 187 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 16 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 188 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 14 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 84 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 17 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 176 in file ..\UCOS\Port\os_cpu_a.asm
      At line 192 in file ..\UCOS\Port\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 18 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 193 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 20 in file ..\UCOS\Port\os_cpu_a.asm
   Uses
      At line 183 in file ..\UCOS\Port\os_cpu_a.asm
Comment: OSTaskSwHook used once
7 symbols
356 symbols in table
